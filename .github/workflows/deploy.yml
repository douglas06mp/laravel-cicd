name: Laravel CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, curl, zip, gd, bcmath, fileinfo
          coverage: none

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --prefer-dist

      - name: Copy .env
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run Pint
        run: vendor/bin/pint --test

      - name: Run tests
        run: vendor/bin/pest --parallel
    
  cd:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push larvel image to ECR
        id: build_and_push_image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup PHP for migrations
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, curl, zip, gd, bcmath, fileinfo, pdo, pdo_pgsql
          coverage: none

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --prefer-dist --no-dev

      - name: Create .env file
        run: |
          echo "APP_ENV=production" > .env
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_URL=${{ secrets.DATABASE_URL }}" >> .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Render ECS task definition
        id: render_task_definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ secrets.TASK_DEFINITION_PATH }}
          container-name: ${{ secrets.TASK_CONTAINER_NAME }}
          image: ${{ steps.build_and_push_image.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          task-definition: ${{ steps.render_task_definition.outputs.task-definition }}
          wait-for-service-stability: true
          force-new-deployment: true